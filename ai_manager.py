import openai.AsyncOpenAI
import fitz
import os
import asyncio
import logging
from database import DescriptionVacancies, CoverLetterVacancies
from dotenv import load_dotenv
from typing import Dict, List

load_dotenv()
logger = logging.getLogger(__name__)


class AIManager:
    def __init__(self, pdf_path: str = 'my_cv.pdf'):
        self.resume_text = self._pdf_to_str(pdf_path)
        self.client = openai.AsyncOpenAI(api_key = os.getenv('OPENAI_APY_KEY'))


    #Converts all data from a PDF resume file into a single line, allowing AI to read the data. 
    def _pdf_to_str(self, pdf_path: str) -> str:
        text: str = ""

        try:
            with fitz.open(pdf_path) as doc:
                for page in doc:
                    text += page.get_text()
        except Exception as e:
            logging.error(f'Error reading PDF: {e}')

        return text

 
    #Formulates tasks for each vacancy for a single request in asynchronous mode
    async def _generate_cover_letter_task(self, url: str, text_content: str):
        prompt = f'''
            Job description: {text_content}

            Read the job description and, taking into account the information provided, write a confident cover letter without exaggerating your abilities. Also, focus on your strengths and your ability to learn and develop quickly.
            Write the letter in the same language as the job description.
            The letter should not contain any additional personal information that is already included in the resume.
            Strong beginning and ending. The first paragraph should grab attention, and the last should contain a clear call to action (e.g., an offer to discuss the interview).
            At the end of the letter, also add a line stating that this letter is part of the project you see in the resume. It was generated by AI.
            '''

        
        try:
            response = await self.client.chat.completions.create(
                model='gpt-4o',
                messages=[
                    {'role': 'system', 'content': f'You are a novice developer looking for your first job in IT. Read your resume  {self.resume_text}'},
                    {'role': 'user', 'content': prompt}
                ],
                temperature=0.7
            )
            answer = response.choices[0].message.content.strip()
            return url, answer
        except openai.RateLimitError as e:
            logger.warning(f"Rate limit exceeded for URL {url}. Retrying after a delay: {e}")
            return url, None
        except openai.BadRequestError as e:
            logger.error(f"Bad request for URL {url}. Check token limits or prompt formatting: {e}")
            return url, None
        except openai.APIError as e:
            logger.error(f"OpenAI API error for URL {url}: {e}")
            return url, None
        except Exception as e:
            logger.error(f"An unexpected error occurred for URL {url}: {e}")
            return url, None







    #Starts executing all tasks for the OpenAI model simultaneously
    async def cover_letter_creater(self, description: List[Dict[str, str]]) -> Dict[str, str]:
        tasks = []
        for doc in description:
            url = doc['url']
            text_content = doc['text_content']


            task = self._generate_cover_letter_task(url, text_content)
            tasks.append(task)

        results = await asyncio.gather(*tasks)
        
        final_result={url: answer for url, answer in results if answer is not None}

        return final_result



































